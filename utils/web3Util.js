var Web3 = require('web3')
var TruffleContract = require("truffle-contract")

// pure web3
var url = 'http://127.0.0.1:10070'
web3 = new Web3(new Web3.providers.HttpProvider(url))

// 直接使用web3需要地址和abi
var address = '0x67dbccb1df812760fe56e08306d926193244e463'
var abi = [
	{
		"constant": true,
		"inputs": [
			{
				"name": "_username",
				"type": "string"
			}
		],
		"name": "getNote",
		"outputs": [
			{
				"name": "",
				"type": "string"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": false,
		"inputs": [
			{
				"name": "_username",
				"type": "string"
			}
		],
		"name": "createUser",
		"outputs": [],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"name": "_username",
				"type": "string"
			}
		],
		"name": "isExistUsername",
		"outputs": [
			{
				"name": "",
				"type": "bool"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [],
		"name": "getTest",
		"outputs": [
			{
				"name": "",
				"type": "uint256"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [],
		"name": "getUserCount",
		"outputs": [
			{
				"name": "",
				"type": "uint256"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": false,
		"inputs": [
			{
				"name": "_testc",
				"type": "string"
			}
		],
		"name": "setTest",
		"outputs": [],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"constant": false,
		"inputs": [
			{
				"name": "_username",
				"type": "string"
			},
			{
				"name": "_note",
				"type": "string"
			}
		],
		"name": "setNote",
		"outputs": [],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "function"
	}
]

if (!web3.isConnected()) {
	throw new Error('unable to connect to ethereum node at ' + url)
} else {
	console.log('successfully connected to ehterum node at ' + url)
	/*let coinbase = web3.eth.coinbase
	console.log('coinbase:' + coinbase)
	let balance = web3.eth.getBalance(coinbase)
	console.log('balance:' + web3.fromWei(balance, 'ether') + " ETH")
	let accounts = web3.eth.accounts
	console.log('accounts:'+ accounts)
	*/
}

// 获取合约对象
var contract = web3.eth.contract(abi).at(address)
// 解锁账户
var mainAccount = web3.eth.accounts[0]
console.log('unlock mainAccount: ' + web3.personal.unlockAccount(mainAccount, '123456', 600))

exports.isExistUsername = (username) => {
	return contract.isExistUsername(username)
}

exports.createUser = (username, callback) => {
	contract.createUser.sendTransaction(username, {from: mainAccount}, (error, result) => {
		//console.log(result)
		if (error == null) {
			callback(true)
		} else {
			callback(false)
		}
	})
}

exports.getUserCount = () => {
	return contract.getUserCount().toNumber()
}

exports.setNote = (username, note, callback) => {
	contract.setNote.sendTransaction(username, note, {from: mainAccount}, (error, result) => {
	  if (error == null) {
			callback(true)
		} else {
			callback(false)
		}
	})
}

exports.getNote = (username) => {
	return contract.getNote(username)
}
/*
console.log(contract.getUserCount().toNumber())
console.log(contract.getTest().toNumber())

console.log('unlock mainAccount: ' + web3.personal.unlockAccount(mainAccount, '123456', 600))


contract.setTest.sendTransaction('test2', {from: mainAccount})
*/

/* deploy by web3 -- not work
var notesContract = web3.eth.contract([{"constant":true,"inputs":[{"name":"_username","type":"string"}],"name":"findUserAddressByUsername","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_userAddress","type":"address"},{"name":"_content","type":"string"},{"name":"_time","type":"string"}],"name":"setNote","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_username","type":"string"}],"name":"isExistUsername","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getUserCount","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_userAddress","type":"address"}],"name":"isExistUserAddress","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_userAddress","type":"address"},{"name":"_username","type":"string"}],"name":"createUser","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_userAddress","type":"address"}],"name":"getNote","outputs":[{"name":"","type":"string"},{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"}]);
var notes = notesContract.new(
   {
     from: web3.eth.accounts[0],
     data: '', 
     gas: '4700000'
   }, function (e, contract){
    //console.log(e, contract);
    if (typeof contract.address !== 'undefined') {
         console.log('Contract mined! address: ' + contract.address + ' transactionHash: ' + contract.transactionHash);
    }
 })
 */


/**
 * set provider
 */
 /*
var contractBuild = require("./build/contracts/Notes.json")
var contract = TruffleContract(contractBuild)
var url = 'http://127.0.0.1:10070'
contract.setProvider(new Web3.providers.HttpProvider(url))

console.log(contract.web3.eth.accounts)

var mainAccount = contract.web3.eth.accounts[0]
var subAccount1 = contract.web3.eth.accounts[1]
var subAccount2 = contract.web3.eth.accounts[2]

// test
contract.deployed().then(function(instance){
	Notes = instance
	instance.getUserCount.call().then(function(result){
		console.log('usr: ' + result.toNumber())
	})
}).catch(function(err){
	console.log(err)
})

contract.deployed().then(function(instance){
	contract.web3.personal.unlockAccount(mainAccount, '123456')
	instance.createUser.sendTransaction('0x5b6b5bfaaa8eade49dc47b86b8e5a2ebef664629', 'sefaice', {from: mainAccount}).catch(function(err){
		console.log(err)
	})
}).catch(function(err){
	console.log(err)
})
*/